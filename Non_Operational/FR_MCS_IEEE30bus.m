clc
clear
close all


% Define parameters for the Weibull distribution (F1)
alpha = 16.5; % scale parameter
beta = 4.5;  % shape parameter
U = 40;      % threshold parameter
f_k0_base = 0.03; % constant failure rate for F1 per 100 km

% Define parameters for F2 and other constants
chi_k_prime = 11;
chi_k_double_prime = -18;
nu_k = 30;
u_k_d = 0.7;
u_k_h = 5;
h_k = 6.7;
%l_k = 100000;
varpi_w_prime = 50;
varpi_w_double_prime = 20;
z_w_prime = 120;
z_w_double_prime = 15;

% Define the array of transmission line lengths in km
line_lengths_km = [20.00
57.50
60.60
13.20
69.00
61.30
14.40
40.40
28.60
14.60
72.38
193.49
72.50
38.30
89.09
48.80
89.20
45.30
69.30
69.70
66.90
76.30
45.00
23.70
72.80
29.40
26.10
52.30
8.22
70.40
62.40
94.10
115.00
132.00
72.80
137.81
145.00
210.00
158.00
69.70
20.90
]; % lengths in km




% Calculate scaled f_k0 values for each line length
scaled_f_k0 = (line_lengths_km / 100) * f_k0_base;

% Simulation settings
start_year = 41;
end_year = 100;
num_years = end_year - start_year + 1;
num_iterations = 10000;

% Pre-allocate arrays to store results for each transmission line
mean_failure_rates_all_lines = zeros(length(line_lengths_km), num_years);
single_mean_failure_rates_all_lines = zeros(length(line_lengths_km), 1);

% Array of angles in degrees
angles = [45, 60, 75, 90];

% Pre-allocate arrays to store angle and distance values
stored_angles = zeros(num_iterations, num_years);
stored_distances = zeros(num_iterations, num_years);

% Initialize array to store combined failure rates for each year and iteration
yearly_failure_rates = zeros(num_iterations, num_years);

% Example functions for time dependency
angle_func = @(t) angles(randi(length(angles))); % Randomly pick an angle for each year

distance_func = @(t) abs(randn());

%distance_func = @(t) rand(); % Placeholder, replace with appropriate time-dependent function
% mean_distance = 100; % Specify the desired mean
% std_distance = 2;   % Specify the desired standard deviation
% 
% distance_func = @(t) abs(mean_distance + std_distance * randn());

% Monte Carlo simulation for each transmission line 
for line_idx = 1:length(line_lengths_km)
    l_k = line_lengths_km(line_idx) * 1000; % Convert km to meters
    f_k0 = scaled_f_k0(line_idx); % Get the scaled f_k0 for the current line
    
    % Initialize array to store combined failure rates for each year and iteration
    yearly_failure_rates = zeros(num_iterations, num_years);

% Monte Carlo simulation
    for i = 1:num_iterations
        for t = start_year:end_year
            % Get the time-dependent angle and distance
            delta_k_t_w = angle_func(t);
            b_k_t_w = distance_func(t);
            
            % Store the angle and distance values
            stored_angles(i, t - start_year + 1) = delta_k_t_w;
            stored_distances(i, t - start_year + 1) = b_k_t_w;
    
            % Convert the selected angle to radians for the calculation
            delta_k_t_w_rad = deg2rad(delta_k_t_w);
            
            % Calculate F_k,t^w
            F_k_t_w = (varpi_w_prime * exp(-(b_k_t_w)^2 / (2 * z_w_prime^2)) - ...
                      varpi_w_double_prime * exp(-(b_k_t_w)^2 / (2 * z_w_double_prime^2))) * ...
                      sin(delta_k_t_w_rad);
            
            % Calculate F2(t)
            F2_t = exp(chi_k_prime * F_k_t_w / nu_k + chi_k_double_prime) * ...
                   (u_k_d * u_k_h / h_k) * l_k;
            
            % Calculate F1(t)
            F1_t = f_k0 + f_k0 * (beta / alpha^beta) * (t - U)^(beta - 1);
            
            % Calculate combined failure rate F_t(t)
            F_t_t = F1_t * F2_t;
            
            % Store failure rate for this year and iteration
            yearly_failure_rates(i, t - start_year + 1) = F_t_t;
        end
    end
% Calculate mean, median, standard deviation, 5th and 95th percentiles for each year
    mean_failure_rates = mean(yearly_failure_rates);
    
    % Store mean failure rates for the current line
    mean_failure_rates_all_lines(line_idx, :) = mean_failure_rates;
    
    % Calculate single mean failure rate over all the years for the current line
    single_mean_failure_rate = mean(mean_failure_rates);
    
    % Store the single mean failure rate for the current line
    single_mean_failure_rates_all_lines(line_idx) = single_mean_failure_rate;
end

% Display results for each transmission line
for line_idx = 1:length(line_lengths_km)
    fprintf('Transmission Line Length: %d km\n', line_lengths_km(line_idx));
    fprintf('Single Mean Failure Rate over all years: %.4f\n', single_mean_failure_rates_all_lines(line_idx));
    fprintf('Mean Failure Rates by Year:\n');
    disp(mean_failure_rates_all_lines(line_idx, :));
end


Boxplot_data_IEEE30 = mean_failure_rates_all_lines';
FRI_IEEE30 = single_mean_failure_rates_all_lines;
